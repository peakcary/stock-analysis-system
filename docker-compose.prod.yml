version: '3.8'

services:
  # MySQL 数据库
  mysql:
    image: mysql:8.0
    container_name: stock_mysql_prod
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./database/my.cnf:/etc/mysql/conf.d/my.cnf:ro
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - stock_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "$MYSQL_USER", "-p$MYSQL_PASSWORD"]
      timeout: 20s
      retries: 10

  # Redis 缓存 (生产环境添加)
  redis:
    image: redis:7-alpine
    container_name: stock_redis_prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - stock_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping"]
      timeout: 10s
      retries: 5

  # FastAPI 后端
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: stock_backend_prod
    restart: unless-stopped
    environment:
      - DATABASE_URL=mysql+pymysql://${MYSQL_USER}:${MYSQL_PASSWORD}@mysql:3306/${MYSQL_DATABASE}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    ports:
      - "8000:8000"
    volumes:
      - ./backend/logs:/app/logs
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - stock_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      timeout: 10s
      retries: 5

  # React 前端 (管理端)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: stock_frontend_prod
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=https://${DOMAIN}/api/v1
      - REACT_APP_ENVIRONMENT=production
    depends_on:
      - backend
    networks:
      - stock_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      timeout: 10s
      retries: 3

  # React 客户端 (用户端)
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: production
    container_name: stock_client_prod
    restart: unless-stopped
    environment:
      - VITE_API_URL=https://${DOMAIN}
      - VITE_CLIENT_API_URL=https://${DOMAIN}
    depends_on:
      - backend
    networks:
      - stock_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      timeout: 10s
      retries: 3

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: stock_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/www/certbot:/var/www/certbot:ro
    depends_on:
      - backend
      - frontend
      - client
    networks:
      - stock_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/nginx-health"]
      timeout: 10s
      retries: 3

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: stock_certbot
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/www/certbot:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${EMAIL} --agree-tos --no-eff-email -d ${DOMAIN} -d www.${DOMAIN}
    profiles:
      - certbot

networks:
  stock_network:
    driver: bridge

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local