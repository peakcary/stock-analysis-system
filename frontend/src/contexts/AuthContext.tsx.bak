import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { message } from 'antd';
import axios from 'axios';

interface User {
  id: number;
  username: string;
  email: string;
  membership_type: string;
  queries_remaining: number;
  membership_expires_at?: string;
}

interface AuthContextType {
  isAuthenticated: boolean;
  user: User | null;
  login: (username: string, password: string) => Promise<boolean>;
  logout: () => void;
  loading: boolean;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  // 获取存储的token
  const getToken = () => {
    return localStorage.getItem('admin_token');
  };

  // 设置axios默认头部
  const setAuthHeader = (token: string | null) => {
    if (token) {
      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
    } else {
      delete axios.defaults.headers.common['Authorization'];
    }
  };

  // 验证token有效性
  const verifyToken = async (token: string): Promise<boolean> => {
    try {
      const response = await axios.get('http://localhost:3007/api/v1/auth/me', {
        headers: { Authorization: `Bearer ${token}` }
      });
      setUser(response.data);
      return true;
    } catch (error) {
      console.error('Token验证失败:', error);
      return false;
    }
  };

  // 登录函数
  const login = async (username: string, password: string): Promise<boolean> => {
    try {
      const response = await axios.post('http://localhost:3007/api/v1/auth/login', {
        username,
        password
      });

      if (response.data.access_token) {
        const token = response.data.access_token;
        localStorage.setItem('admin_token', token);
        setAuthHeader(token);
        setUser(response.data.user);
        setIsAuthenticated(true);
        message.success('登录成功');
        return true;
      }
      return false;
    } catch (error: any) {
      console.error('登录失败:', error);
      message.error(error.response?.data?.detail || '登录失败');
      return false;
    }
  };

  // 退出登录
  const logout = () => {
    localStorage.removeItem('admin_token');
    setAuthHeader(null);
    setUser(null);
    setIsAuthenticated(false);
    message.success('已退出登录');
  };

  // 初始化认证状态
  useEffect(() => {
    const initAuth = async () => {
      const token = getToken();
      if (token) {
        setAuthHeader(token);
        const isValid = await verifyToken(token);
        if (isValid) {
          setIsAuthenticated(true);
        } else {
          // Token无效，清除
          logout();
        }
      }
      setLoading(false);
    };

    initAuth();
  }, []);

  const value: AuthContextType = {
    isAuthenticated,
    user,
    login,
    logout,
    loading
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};